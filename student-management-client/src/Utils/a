//select option
<select onChange={(e) => setBrand(e.target.value)} required>
<option value="">Select Brand</option>
<option value="iphone">iPhone</option>
<option value="samsung">Samsung</option>
<option value="xiomi">Xiomi</option>
<option value="other">Other</option>
</select>

//catch uploaded img
const [productImg, setProductImg] = useState("");

const handleProductImageUpload = (e) => {
  const file = e.target.files[0];

  TransformFileData(file);
};

const TransformFileData = (file) => {
  const reader = new FileReader();

  if (file) {
    reader.readAsDataURL(file);
    reader.onloadend = () => {
      setProductImg(reader.result);
    };
  } else {
    setProductImg("");
  }
};
 
//image input
<input
          id="imgUpload"
          accept="image/*"
          type="file"
          onChange={handleProductImageUpload}
          required
        />

    //preview image

<>
    {productImg ? (
      <>
        <img src={productImg} alt="error!" />
      </>
    ) : (
      <p>Product image upload preview will appear here!</p>
    )}
  </>

  //button navigate
  <PrimaryButton
  onClick={() => navigate("/admin/products/create-product")}
>
  Create
</PrimaryButton>

//no item display
{cart.cartItems.length === 0 ? (
    <div className="cart-empty">
      <p>Your cart is currently empty</p>
    </div>
  ) : (
      <div className="cart-items">
        {cart.cartItems &&
          cart.cartItems.map((cartItem) => (
            
              </div>
            </div>
          ))}



 //private route
          import React from 'react';
import {Route, Redirect} from 'react-router-dom'

const PrivateRoute = ({...rest}) => {
    const auth = JSON.parse(localStorage.getItem('token'));
    if (auth){
        if (auth.token){
          return <Route {...rest}/>
        }
    }
  return <Redirect to="/signin"/>
};

export default PrivateRoute;


//map with categoy details
{
    products && products.map((p)=>(
        <Card image={p.image.url} productName={p.name} prodLink={`/product/${p._id}`} 
        prodCategory={p.category ? p.category.name : ''} price={p.price}/>
    )) 
}

stepper
)
}
// import Box from '@mui/material/Box';
// import Stepper from '@mui/material/Stepper';
// import Step from '@mui/material/Step';
// import StepLabel from '@mui/material/StepLabel';
// import Button from '@mui/material/Button';
// import Typography from '@mui/material/Typography';

// const steps = ['Select campaign settings', 'Create an ad group', 'Create an ad'];

// export default function HorizontalLinearStepper() {
//   const [activeStep, setActiveStep] = React.useState(0);
//   const [skipped, setSkipped] = React.useState(new Set());

//   const isStepOptional = (step) => {
//     return step === 1;
//   };

//   const isStepSkipped = (step) => {
//     return skipped.has(step);
//   };

//   const handleNext = () => {
//     let newSkipped = skipped;
//     if (isStepSkipped(activeStep)) {
//       newSkipped = new Set(newSkipped.values());
//       newSkipped.delete(activeStep);
//     }

//     setActiveStep((prevActiveStep) => prevActiveStep + 1);
//     setSkipped(newSkipped);
//   };

//   const handleBack = () => {
//     setActiveStep((prevActiveStep) => prevActiveStep - 1);
//   };

//   const handleSkip = () => {
//     if (!isStepOptional(activeStep)) {
//       // You probably want to guard against something like this,
//       // it should never occur unless someone's actively trying to break something.
//       throw new Error("You can't skip a step that isn't optional.");
//     }

//     setActiveStep((prevActiveStep) => prevActiveStep + 1);
//     setSkipped((prevSkipped) => {
//       const newSkipped = new Set(prevSkipped.values());
//       newSkipped.add(activeStep);
//       return newSkipped;
//     });
//   };

//   const handleReset = () => {
//     setActiveStep(0);
//   };

//   return (
//     <Box sx={{ width: '100%' }}>
//       <Stepper activeStep={activeStep}>
//         {steps.map((label, index) => {
//           const stepProps = {};
//           const labelProps = {};
//           if (isStepOptional(index)) {
//             labelProps.optional = (
//               <Typography variant="caption">Optional</Typography>
//             );
//           }
//           if (isStepSkipped(index)) {
//             stepProps.completed = false;
//           }
//           return (
//             <Step key={label} {...stepProps}>
//               <StepLabel {...labelProps}>{label}</StepLabel>
//             </Step>
//           );
//         })}
//       </Stepper>
//       {activeStep === steps.length ? (
//         <React.Fragment>
//           <Typography sx={{ mt: 2, mb: 1 }}>
//             All steps completed - you&apos;re finished
//           </Typography>
//           <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>
//             <Box sx={{ flex: '1 1 auto' }} />
//             <Button onClick={handleReset}>Reset</Button>
//           </Box>
//         </React.Fragment>
//       ) : (
//         <React.Fragment>
//           <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>
//           <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>
//             <Button
//               color="inherit"
//               disabled={activeStep === 0}
//               onClick={handleBack}
//               sx={{ mr: 1 }}
//             >
//               Back
//             </Button>
//             <Box sx={{ flex: '1 1 auto' }} />
//             {isStepOptional(activeStep) && (
//               <Button color="inherit" onClick={handleSkip} sx={{ mr: 1 }}>
//                 Skip
//               </Button>
//             )}

//             <Button onClick={handleNext}>
//               {activeStep === steps.length - 1 ? 'Finish' : 'Next'}
//             </Button>
//           </Box>
//         </React.Fragment>
//       )}
//     </Box>
//   );
// }